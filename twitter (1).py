# -*- coding: utf-8 -*-
"""Twitter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZGA7BCZOtYEjeQ891mCzn2Rli1AKjl8

# Install
"""

!pip3 install --user --upgrade -e git+https://github.com/twintproject/twint.git@origin/master#egg=twint

!pip3 install --user --upgrade git+https://github.com/himanshudabas/twint.git@origin/twint-fixes#egg=twint

"""# Functions"""

import twint
import nest_asyncio
import pandas as pd
import numpy as np

pd.options.display.max_rows = 50
pd.options.display.max_columns = 50

# Get the last 400 tweets from for a spefic to find 50 profile with more tham 1k followers. 

nest_asyncio.apply()

c = twint.Config()
c.Search = ['#BBB']       # topic
c.Limit = 400     
c.Stats = True
c.Pandas = True
c.Hide_output = True

twint.run.Search(c)

Tweets_df = twint.storage.panda.Tweets_df

# Get all ussers for all post select

nest_asyncio.apply()
users = pd.DataFrame()

for user in Tweets_df['user_id'].unique():

  c = twint.Config()
  c.User_id = user
  c.Pandas = True
  #c.Hide_output = True
  twint.run.Lookup(c)
  users = users.append(twint.storage.panda.User_df)

#Limited the total of profile 50 and just getting the ones with more than 1 k follwers.

users = users[users['followers']>1000].sort_values(by = 'followers', ascending = False ).reset_index()[:50].drop('index', axis = 1)

tweet_50 = pd.DataFrame()
tweet = pd.DataFrame()

#Looking for the last 100 tweets for each profile selected

import time

for id in users['id'].unique():
  
  tam = 0
  date = '2022-03-18'
  tweet_50 = tweet_50.append(tweet)
  tweet = pd.DataFrame()
  time.sleep(0.5)
  while tam < 100:
    c = twint.Config()
    c.Limit =  50
    c.User_id = id	
    c.Pandas = True
    twint.run.Search(c)
    tweet = tweet.append(twint.storage.panda.Tweets_df)
    tam = tweet.shape[0]
    time.sleep(1)
    c.Since = str(tweet['date'].tail(1).values)[2:12]

filtro = ['id', 'created_at', 'date',  'user_id', 'username', 'tweet','replies_count', 'retweets_count', 'likes_count', 'hashtags', 'near', 'geo', 'source', 'user_rt_id', 'user_rt']

tweet_filtrato = tweet_50.filter(filtro)

#Creating new features

tweet_filtrato['created_at'] = pd.to_datetime(tweet_filtrato['created_at'])
tweet_filtrato['week'] = tweet_filtrato['created_at'].dt.isocalendar().week
tweet_filtrato['month'] = tweet_filtrato['created_at'].dt.month
tweet_filtrato ['tweets_count'] = 1

# Creating table to calculate the KPI requested. 
# In order to get best insight it will be also store the replies retweets and like.

table_total = tweet_filtrato.groupby(by = ['username','user_id'] ).sum().filter(['tweets_count', 'replies_count',	'retweets_count',	'likes_count'])
table_day = tweet_filtrato.groupby(by = ['username','user_id','date'] ).sum().filter(['tweets_count', 'replies_count',	'retweets_count',	'likes_count'])
table_week = tweet_filtrato.groupby(by = ['username','user_id','week'] ).sum().filter(['tweets_count', 'replies_count',	'retweets_count',	'likes_count'])
table_month = tweet_filtrato.groupby(by = ['username','user_id','month'] ).sum().filter(['tweets_count', 'replies_count',	'retweets_count',	'likes_count'])

# Define the aggfunc and the column Order for Pivot Table 

func_total = {
        'likes_count':[np.sum],   
        'tweets_count': [np.sum],   
        'replies_count':[np.sum],   
        'retweets_count':[np.sum]   
        }

func = {
        'likes_count':[np.sum ,np.mean, np.median],   
        'tweets_count': [np.sum, np.mean, np.median],   
        'replies_count':[np.sum,np.mean, np.median],  
        'retweets_count':[np.sum, np.mean, np.median]  
        }

column_order_L0 = ['tweets_count','replies_count','retweets_count','likes_count']
column_order_L1 = ['sum','mean','median']

#Creating report using PIVOT table

report_total = pd.pivot_table(table_total,index=['username','user_id'],aggfunc=func_total).reindex(column_order_L0, axis=1, level = 0).reindex(column_order_L1, axis=1, level = 1)
report_total = report_total.rename(columns={'tweets_count': "tweets_total", 'replies_count': "replies_total", 'retweets_count' :  'retweets_total' ,	'likes_count' : 'likes_total'}, level=0)

report_day = pd.pivot_table(table_day,index=['username','user_id'],aggfunc=func).reindex(column_order_L0, axis=1, level = 0).reindex(column_order_L1, axis=1, level = 1)
report_day = report_day.rename(columns={'tweets_count': "tweets_day", 'replies_count': "replies_day", 'retweets_count' :  'retweets_day' ,	'likes_count' : 'likes_day'}, level=0)

report_week = pd.pivot_table(table_week,index=['username','user_id'],aggfunc=func).reindex(column_order_L0, axis=1, level = 0).reindex(column_order_L1, axis=1, level = 1)
report_week = report_week.rename(columns={'tweets_count': "tweets_week", 'replies_count': "replies_week", 'retweets_count' :  'retweets_week' ,	'likes_count' : 'likes_week'}, level=0)

report_month = pd.pivot_table(table_month,index=['username','user_id'],aggfunc=func).reindex(column_order_L0, axis=1, level = 0).reindex(column_order_L1, axis=1, level = 1)
report_month = report_month.rename(columns={'tweets_count': "tweets_month", 'replies_count': "replies_month", 'retweets_count' :  'retweets_month' ,	'likes_count' : 'likes_month'}, level=0)

report_full = report_total.merge(report_day, how = 'left', on = ['username',	'user_id'] )
report_full = report_full.merge(report_week, how = 'left', on = ['username',	'user_id'] )
report_full = report_full.merge(report_month, how = 'left', on = ['username',	'user_id'] )

report_requested = report_full.loc[:, (['tweets_day', 'tweets_week', 'tweets_month' ], ['sum','mean','median'])]
report_requested

"""# Resquests

Build a simple web scraper to collect data from 50 random profiles with over 1k 
followers on Twitter

The table below shows the 50 profiles over 1k followers.
"""

users

"""The last 50 posts. In onder to get bet outputs we collecet 100 last post. The table below shows the post."""

tweet_50

"""The report we made 2 reports. Both are in line with was requested, however the report_requested show exctaly what was requested. """

report_full

report_requested

"""Take in consideration that it is analyzed just they last 100 post of each profile. The mean of week tweet  is  the best way to represent the user profile, once this show how the users behaves without be excessively affect by outliers as the day metrics. It is possible that month metrics become more relevant with the increase of post, by now the are show the basically result of the week metrics.
Also the full report show the some interesting metrics using the reactions of the tweets. This help the us to understating the impact of each tweets can have on the audience.   


"""